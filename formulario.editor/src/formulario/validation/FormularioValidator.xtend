/*
 * generated by Xtext
 */
package formulario.validation

import Formularios_DASOFT.Formulario
import Formularios_DASOFT.Formularios_DASOFTPackage
import org.eclipse.xtext.validation.Check
import Formularios_DASOFT.AccionSeleccion
import Formularios_DASOFT.InputMultiple
import Formularios_DASOFT.AccionPulsacion
import Formularios_DASOFT.InputBoton
import Formularios_DASOFT.AccionValor
import Formularios_DASOFT.InputTexto
import Formularios_DASOFT.InputCheck
import Formularios_DASOFT.InputCombo
import Formularios_DASOFT.InputRadio
import Formularios_DASOFT.Input
import Formularios_DASOFT.Layout
import Formularios_DASOFT.InputReaccion
import Formularios_DASOFT.ReaccionHabilitado
import Formularios_DASOFT.ReaccionVisible

//import org.eclipse.xtext.validation.Check

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class FormularioValidator extends AbstractFormularioValidator {

//  public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					MyDslPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}

	@Check
	def validacionComprobacionCampos (Formulario form) {
		var flag = true;
		if (form.comprobacionCampos){
			flag = false;
			for(input : form.layout.entradas){
				
				for (accion : form.pruebas.acciones){
					if (accion.asercion.elemento == input){
						flag = true;
					}
				}

			}
			
			if (!flag){
				warning('El campo debe de estar incluido en al menos una asercion',
					Formularios_DASOFTPackage.Literals.FORMULARIO__COMPROBACION_CAMPOS,
					'faltaCampo')
				
			}
		}
		
	}
	
	@Check
	def validacionComprobacionAccion (Formulario form) {
		var flag = true;
		if (form.comprobacionAccion){
			flag = false;
			for(input : form.layout.entradas){
				
				for (accion : form.pruebas.acciones){
					if (accion.elemento == input){
						flag = true;
					}
				}
			}
			
			if (!flag){
				warning('El campo debe de estar incluido en al menos una accion',
					Formularios_DASOFTPackage.Literals.FORMULARIO__COMPROBACION_ACCION,
					'faltaAccion');	
			}
		}
	}
	
	@Check
	def inputAccionSeleccion (AccionSeleccion accion){
		if (!(accion.elemento instanceof InputMultiple)){
			warning('Una accion de este tipo no puede apuntar a este input',
					Formularios_DASOFTPackage.Literals.ACCION__ELEMENTO,
					'InputIncorrecto');	
		}
	}
	
	@Check
	def inputAccionPulsacion (AccionPulsacion accion){
		if (!(accion.elemento instanceof InputBoton)){
			warning('Una accion de este tipo no puede apuntar a este input',
					Formularios_DASOFTPackage.Literals.ACCION__ELEMENTO,
					'InputIncorrecto');	
		}
	}
	
	@Check
	def inputAccionValor (AccionValor accion){
		if (!(accion.elemento instanceof InputTexto)){
			warning('Una accion de este tipo no puede apuntar a este input',
					Formularios_DASOFTPackage.Literals.ACCION__ELEMENTO,
					'InputIncorrecto');	
		}
	}
	
	@Check
	def comprobarTamañoSeleccion (Input input){
		
		if (input instanceof InputCheck){
			
			if (input.seleccion.size > input.valores.size){
				warning('Este input no puede tener esa cantidad de opciones por defecto',
						Formularios_DASOFTPackage.Literals.INPUT_CHECK__SELECCION,
						'SeleccionFueraDeRango');	
			}
		}
	}
	
	@Check
	def comprobarSeleccionCorrecta (Input input){
		if (input instanceof InputCheck){
			for (valor : input.seleccion){
				if (valor < 1 || valor > input.valores.size){
					warning('Una de las opciones por defecto de este input no es válida',
							Formularios_DASOFTPackage.Literals.INPUT_CHECK__SELECCION,
							'SeleccionFueraDeRango');
				}
			}
		} else if (input instanceof InputCombo){
			if (input.seleccion < 1 || input.seleccion > input.valores.size){
				warning('Este input no puede tener esa cantidad de opciones por defecto',
						Formularios_DASOFTPackage.Literals.INPUT_COMBO__SELECCION,
						'SeleccionFueraDeRango');
			}
		} else if (input instanceof InputRadio){
			if (input.seleccion < 1 || input.seleccion > input.valores.size){
				warning('Este input no puede tener esa cantidad de opciones por defecto',
						Formularios_DASOFTPackage.Literals.INPUT_RADIO__SELECCION,
						'SeleccionFueraDeRango');
			}
		}
	}
	
	@Check
	def comprobarAccionHabilitar(Input input){
				
		var flag = false;
		var lo = input.eContainer as Layout;
		if (input.deshabilitado){
			for (input2 : lo.entradas){
				if (input2 instanceof InputReaccion){
					if (input2.reaccion.objetivo == input && input2.reaccion instanceof ReaccionHabilitado)
					flag = true;
				}
			}
		}
		
		if (!flag){
			warning('Este input debe tener una accion que lo habilite',
						Formularios_DASOFTPackage.Literals.INPUT__DESHABILITADO,
						'ElementoNoHabilitable');
		}
	}
	
	@Check
	def comprobarAccionVisualizar(Input input){
				
		var flag = false;
		var lo = input.eContainer as Layout;
		if (input.invisible){
			for (input2 : lo.entradas){
				if (input2 instanceof InputReaccion){
					if (input2.reaccion.objetivo == input && input2.reaccion instanceof ReaccionVisible)
					flag = true;
				}
			}
		}
		
		if (!flag){
			warning('Este input debe tener una accion que lo ponga visible',
						Formularios_DASOFTPackage.Literals.INPUT__INVISIBLE,
						'ElementoNoVisualizable');
		}
	}

}
