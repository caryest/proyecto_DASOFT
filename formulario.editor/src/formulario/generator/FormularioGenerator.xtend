/*
 * generated by Xtext
 */
package formulario.generator

import Formularios_DASOFT.AccionSeleccion
import Formularios_DASOFT.AccionValor
import Formularios_DASOFT.AsercionHabilitado
import Formularios_DASOFT.AsercionInvisible
import Formularios_DASOFT.AsercionSeleccion
import Formularios_DASOFT.AsercionValor
import Formularios_DASOFT.Formulario
import Formularios_DASOFT.InputBoton
import Formularios_DASOFT.InputCheck
import Formularios_DASOFT.InputCombo
import Formularios_DASOFT.InputRadio
import Formularios_DASOFT.InputTexto
import Formularios_DASOFT.PruebaInterfaz
import Formularios_DASOFT.ReaccionHabilitado
import Formularios_DASOFT.ReaccionVisible
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import Formularios_DASOFT.BotonValidar
import Formularios_DASOFT.BotonCancelar
import Formularios_DASOFT.BotonGuardar
import Formularios_DASOFT.impl.InputCheckImpl

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class FormularioGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		

 		for(Formulario form : resource.allContents.toIterable.filter(Formulario)){
			fsa.generateFile("forms/Formulario.java", generarFormulario(form))
		
			fsa.generateFile("../tests/forms/FormularioTest.java", generarTest(form))
		}
		
	}
	
	def generarFormulario (Formulario form)'''
		package forms;

		import java.io.FileWriter;
		
		import org.eclipse.swt.SWT;
		import org.eclipse.swt.events.SelectionEvent;
		import org.eclipse.swt.events.SelectionListener;
		import org.eclipse.swt.layout.GridData;
		import org.eclipse.swt.layout.GridLayout;
		import org.eclipse.swt.widgets.Button;
		import org.eclipse.swt.widgets.Combo;
		import org.eclipse.swt.widgets.Display;
		import org.eclipse.swt.widgets.FileDialog;
		import org.eclipse.swt.widgets.Composite;
		import org.eclipse.swt.widgets.Label;
		import org.eclipse.swt.widgets.MessageBox;
		import org.eclipse.swt.widgets.Shell;
		import org.eclipse.swt.widgets.Text;
		
		public class Formulario {
				
			public static void main(String[] args) {
				Display display = new Display();
				Shell   shell   = new Formulario().showForm(display);
				while (!shell.isDisposed()) 
					if (!display.readAndDispatch())
						display.sleep();
				display.dispose();
			}
			
			public Shell showForm(Display display) {
				
				Shell shell = new Shell(display);
				shell.setText  ("«form.name»");
				shell.setLayout(new GridLayout(«form.layout.columnas», false));
				
				// Añadimos los elementos de la interfaz
				«FOR input : form.layout.entradas»
				
				« IF input instanceof InputBoton »// CASO BOTON
				Button boton«input.name» = new Button(shell, SWT.BUTTON1);
				boton«input.name».setText("«input.name»");
				« ELSEIF input instanceof InputTexto »// CASO TEXTO
				Composite contentText«input.name» = new Composite(shell, SWT.BORDER);
				contentText«input.name».setLayout(new GridLayout(2, true));
				Label label«input.name» = new Label(contentText«input.name», SWT.NONE);
				Text  texto«input.name»  = new Text(contentText«input.name», SWT.BORDER);
				label«input.name».setText("«input.name»");
				« ELSEIF input instanceof InputCheck »// CASO CHECKBOX
				Composite contentCheck«input.name» = new Composite(shell, SWT.BORDER);
				contentCheck«input.name».setLayout(new GridLayout(1, true));
				Button[] check«input.name» = new Button[«(input as InputCheck).valores.size»];
				
				«FOR valor : (input as InputCheck).valores»
				check«input.name»[«(input as InputCheck).valores.indexOf(valor)»] = new Button(contentCheck«input.name», SWT.CHECK);
				check«input.name»[«(input as InputCheck).valores.indexOf(valor)»].setText("«valor»");
				«ENDFOR»
				« ELSEIF input instanceof InputRadio »// CASO RADIO
				Composite contentRadio«input.name» = new Composite(shell, SWT.BORDER);
				contentRadio«input.name».setLayout(new GridLayout(1, true));
				Button[] radio«input.name» = new Button[«(input as InputRadio).valores.size»];

				«FOR valor : (input as InputRadio).valores»
				radio«input.name»[«(input as InputRadio).valores.indexOf(valor)»] = new Button(contentRadio«input.name», SWT.RADIO);
				radio«input.name»[«(input as InputRadio).valores.indexOf(valor)»].setSelection(false);
				radio«input.name»[«(input as InputRadio).valores.indexOf(valor)»].setText("«valor»");
				radio«input.name»[«(input as InputRadio).valores.indexOf(valor)»].setBounds(10, 5, 75, 30);
				«ENDFOR»
				« ELSEIF input instanceof InputCombo » // CASO COMBO
				Combo combo«input.name» = new Combo(shell, SWT.SIMPLE);
				combo«input.name».setText("«input.name»");
				«FOR valor : (input as InputCombo).valores»
				combo«input.name».add("«valor»");
				«ENDFOR»
				« ENDIF »
				«ENDFOR»
				
				// Funciones Reaccion
				«FOR input : form.layout.entradas»
				« IF input instanceof InputCheck »// CASO CHECKBOX
				« IF (input as InputCheck).reaccion != null »
				« IF (input as InputCheck).reaccion instanceof ReaccionVisible »
				check«input.name»[«(input as InputCheck).reaccion.activacion-1»].addSelectionListener(new SelectionListener() {
					
					@Override
					public void widgetSelected(SelectionEvent arg0) {
						« IF (input as InputCheck).reaccion.objetivo instanceof InputBoton »
						boton«(input as InputCheck).reaccion.objetivo.name».setVisible( !check«input.name»[«(input as InputCheck).reaccion.activacion-1»].getSelection() );
						« ELSEIF (input as InputCheck).reaccion.objetivo instanceof InputTexto »
						texto«(input as InputCheck).reaccion.objetivo.name».setVisible( !check«input.name»[«(input as InputCheck).reaccion.activacion-1»].getSelection() );
						« ELSEIF (input as InputCheck).reaccion.objetivo instanceof InputCheck »
						check«(input as InputCheck).reaccion.objetivo.name».setVisible( !check«input.name»[«(input as InputCheck).reaccion.activacion-1»].getSelection() );
						« ELSEIF (input as InputCheck).reaccion.objetivo instanceof InputCombo »
						combo«(input as InputCheck).reaccion.objetivo.name».setVisible( !check«input.name»[«(input as InputCheck).reaccion.activacion-1»].getSelection() );
						« ELSEIF (input as InputCheck).reaccion.objetivo instanceof InputRadio »
						radio«(input as InputCheck).reaccion.objetivo.name».setVisible( !check«input.name»[«(input as InputCheck).reaccion.activacion-1»].getSelection() );
						« ENDIF »
					}
					
					@Override
					public void widgetDefaultSelected(SelectionEvent arg0) {}
				});
				« ELSEIF (input as InputCheck).reaccion instanceof ReaccionHabilitado »
				check«input.name»[«(input as InputCheck).reaccion.activacion-1»].addSelectionListener(new SelectionListener() {
					
					@Override
					public void widgetSelected(SelectionEvent arg0) {
						« IF (input as InputCheck).reaccion.objetivo instanceof InputBoton »
						boton«(input as InputCheck).reaccion.objetivo.name».setEnabled( !check«input.name»[«(input as InputCheck).reaccion.activacion-1»].getSelection() );
						« ELSEIF (input as InputCheck).reaccion.objetivo instanceof InputTexto »
						texto«(input as InputCheck).reaccion.objetivo.name».setEnabled( !check«input.name»[«(input as InputCheck).reaccion.activacion-1»].getSelection() );
						« ELSEIF (input as InputCheck).reaccion.objetivo instanceof InputCheck »
						check«(input as InputCheck).reaccion.objetivo.name».setEnabled( !check«input.name»[«(input as InputCheck).reaccion.activacion-1»].getSelection() );
						« ELSEIF (input as InputCheck).reaccion.objetivo instanceof InputCombo »
						combo«(input as InputCheck).reaccion.objetivo.name».setEnabled( !check«input.name»[«(input as InputCheck).reaccion.activacion-1»].getSelection() );
						« ELSEIF (input as InputCheck).reaccion.objetivo instanceof InputRadio »
						radio«(input as InputCheck).reaccion.objetivo.name».setEnabled( !check«input.name»[«(input as InputCheck).reaccion.activacion-1»].getSelection() );
						« ENDIF »
					}
					
					@Override
					public void widgetDefaultSelected(SelectionEvent arg0) {}
				});
				« ENDIF »
				« ENDIF »
				« ELSEIF input instanceof InputRadio »// CASO RADIO
				« IF (input as InputRadio).reaccion != null »
				« IF (input as InputRadio).reaccion instanceof ReaccionVisible »
				radio«input.name»[«(input as InputRadio).reaccion.activacion-1»].addSelectionListener(new SelectionListener() {
					
					@Override
					public void widgetSelected(SelectionEvent arg0) {
						« IF (input as InputRadio).reaccion.objetivo instanceof InputBoton »
						boton«(input as InputRadio).reaccion.objetivo.name».setVisible( !radio«input.name»[«(input as InputRadio).reaccion.activacion-1»].getSelection() );
						« ELSEIF (input as InputRadio).reaccion.objetivo instanceof InputTexto »
						texto«(input as InputRadio).reaccion.objetivo.name».setVisible( !radio«input.name»[«(input as InputRadio).reaccion.activacion-1»].getSelection() );
						« ELSEIF (input as InputRadio).reaccion.objetivo instanceof InputCheck »
						check«(input as InputRadio).reaccion.objetivo.name».setVisible( !radio«input.name»[«(input as InputRadio).reaccion.activacion-1»].getSelection() );
						« ELSEIF (input as InputRadio).reaccion.objetivo instanceof InputCombo »
						combo«(input as InputRadio).reaccion.objetivo.name».setVisible( !radio«input.name»[«(input as InputRadio).reaccion.activacion-1»].getSelection() );
						« ELSEIF (input as InputRadio).reaccion.objetivo instanceof InputRadio »
						radio«(input as InputRadio).reaccion.objetivo.name».setVisible( !radio«input.name»[«(input as InputRadio).reaccion.activacion-1»].getSelection() );
						« ENDIF »
					}
					
					@Override
					public void widgetDefaultSelected(SelectionEvent arg0) {}
				});
				« ELSEIF (input as InputRadio).reaccion instanceof ReaccionHabilitado »
				radio«input.name»[«(input as InputRadio).reaccion.activacion-1»].addSelectionListener(new SelectionListener() {
					
					@Override
					public void widgetSelected(SelectionEvent arg0) {
						« IF (input as InputRadio).reaccion.objetivo instanceof InputBoton »
						boton«(input as InputRadio).reaccion.objetivo.name».setEnabled( !radio«input.name»[«(input as InputRadio).reaccion.activacion-1»].getSelection() );
						« ELSEIF (input as InputRadio).reaccion.objetivo instanceof InputTexto »
						texto«(input as InputRadio).reaccion.objetivo.name».setEnabled( !radio«input.name»[«(input as InputRadio).reaccion.activacion-1»].getSelection() );
						« ELSEIF (input as InputRadio).reaccion.objetivo instanceof InputCheck »
						check«(input as InputRadio).reaccion.objetivo.name».setEnabled( !radio«input.name»[«(input as InputRadio).reaccion.activacion-1»].getSelection() );
						« ELSEIF (input as InputRadio).reaccion.objetivo instanceof InputCombo »
						combo«(input as InputRadio).reaccion.objetivo.name».setEnabled( !radio«input.name»[«(input as InputRadio).reaccion.activacion-1»].getSelection() );
						« ELSEIF (input as InputRadio).reaccion.objetivo instanceof InputRadio »
						radio«(input as InputRadio).reaccion.objetivo.name».setEnabled( !radio«input.name»[«(input as InputRadio).reaccion.activacion-1»].getSelection() );
						« ENDIF »
					}
					
					@Override
					public void widgetDefaultSelected(SelectionEvent arg0) {}
				});
				« ENDIF »
				« ENDIF »
				« ENDIF »
				«ENDFOR»
				
				// Funciones de Input de tipo BOTON
				«FOR input : form.layout.entradas»
				« IF input instanceof BotonValidar »
				// Caso Validar
				boton«input.name».addSelectionListener(new SelectionListener() {
					
					@Override
					public void widgetSelected(SelectionEvent arg0) {
						
						String mensaje_error = "";
						boolean hay_error = false;
						
						«FOR inputVal : form.layout.entradas»
						« IF inputVal instanceof InputTexto»
						« IF (inputVal as InputTexto).obligatorio == true »
						if (texto«inputVal.name».getText().length() == 0){
							hay_error = true;
							mensaje_error += "*La entrada de texto '«inputVal.name»' no puede estar vacía.\n";
						}
						« ENDIF »
						« ENDIF »
						« ENDFOR »
						
						if (hay_error){
							MessageBox dialog = new MessageBox(shell, SWT.ICON_ERROR | SWT.OK);
							dialog.setText("Validación");
							dialog.setMessage(mensaje_error);
							
							// open dialog and await user selection
							dialog.open();
						}else{
							MessageBox dialog = new MessageBox(shell, SWT.ICON_INFORMATION | SWT.OK);
							dialog.setText("Validación");
							dialog.setMessage("Resultado de la validación correcto.");
							
							// open dialog and await user selection
							dialog.open();
						}
						
					}
					
					@Override
					public void widgetDefaultSelected(SelectionEvent arg0) {}
				});
				« ELSEIF input instanceof BotonCancelar » // Caso Cancelar
				boton«input.name».addSelectionListener(new SelectionListener() {
					
					@Override
					public void widgetSelected(SelectionEvent arg0) {
						
						«FOR inputVal : form.layout.entradas»
						« IF inputVal instanceof InputTexto»
						texto«inputVal.name».setText("");
						« ELSEIF inputVal instanceof InputCheck »
						«FOR valor : (inputVal as InputCheck).valores»
						check«inputVal.name»[«(inputVal as InputCheck).valores.indexOf(valor)»].setSelection(false);
						«ENDFOR»
						« ELSEIF inputVal instanceof InputCombo »
						combo«inputVal.name».deselect(0);
						« ELSEIF inputVal instanceof InputRadio »
						«FOR valor : (inputVal as InputRadio).valores»
						radio«inputVal.name»[«(inputVal as InputRadio).valores.indexOf(valor)»].setSelection(false);
						«ENDFOR»
						« ENDIF »
						« ENDFOR »
						
					}
					
					@Override
					public void widgetDefaultSelected(SelectionEvent arg0) {}
				});
				« ELSEIF input instanceof BotonGuardar » // Caso Guardar
				boton«input.name».addSelectionListener(new SelectionListener() {
					
					@Override
					public void widgetSelected(SelectionEvent arg0) {
						
						FileDialog dialog = new FileDialog(shell, SWT.SAVE);
					    dialog.setFilterNames(new String[] { "Formulario", "All Files (*.*)" });
					    dialog.setFilterExtensions(new String[] { "*.formulario", "*.*" }); // Windows
					                                    // wild
					                                    // cards
					    dialog.setFilterPath("c:\\"); // Windows path
					    dialog.setFileName("form.formulario");
					    String filename = dialog.open(); 
					    
					    while (!shell.isDisposed()) {
				        if (!display.readAndDispatch())
					        display.sleep();
					    }
					    display.dispose();
					    
					    FileWriter writer = null; 
						try 
						{ 
							writer = new FileWriter(filename); 
							«FOR inputVal : form.layout.entradas»
							«IF inputVal instanceof InputTexto»
							writer.write(texto«inputVal.name» + ": " + texto«inputVal.name».getText() + "\n"); 
							«ELSEIF inputVal instanceof InputRadio»
							String valoresRadio«inputVal.name» = "";
							for(Button btnRadio : radio«inputVal.name»){
								if (btnRadio.getSelection() == true){
									valoresRadio«inputVal.name» += btnRadio.getText();
									valoresRadio«inputVal.name» += " ";
								}
							}
							writer.write(radio«inputVal.name» + ": " + valoresRadio«inputVal.name» + "\n"); 
							«ELSEIF inputVal instanceof InputCombo»
							writer.write(combo«inputVal.name» + ": " + combo«inputVal.name».getText() + "\n"); 
							«ELSEIF inputVal instanceof InputCheck»
							String valoresCheck«inputVal.name»= "";
							for(Button btnCheck : check«inputVal.name»){
								if (btnCheck.getSelection() == true){
									valoresCheck«inputVal.name» += btnCheck.getText();
									valoresCheck«inputVal.name» += " ";
								}
							}
							writer.write(check«inputVal.name» + ": " + valoresCheck«inputVal.name» + "\n"); 
							«ENDIF»
							«ENDFOR»
							writer.write("This\n is\n an\n example\n"); 
						} 
						catch (Exception e) 
						{ 
							System.err.println("Error al guardar el archivo"); 
						} 
						finally 
						{ 
							try 
							{ 
								writer.close();
							} catch (Exception e) {} 
						} 
						
					}
					
					@Override
					public void widgetDefaultSelected(SelectionEvent arg0) {}
				});
				« ENDIF »
				«ENDFOR»
				
				// show form
				shell.pack();
				shell.open();
				return shell;
				
			}
		}
	'''
	
	def generarTest (Formulario form)'''
		package forms;

		import static org.junit.Assert.assertFalse;
		import static org.junit.Assert.assertTrue;
		
		import org.eclipse.swt.widgets.Display;
		import org.eclipse.swt.widgets.Shell;
		import org.eclipse.swtbot.swt.finder.SWTBot;
		import org.eclipse.swtbot.swt.finder.junit.SWTBotJunit4ClassRunner;
		import org.eclipse.swtbot.swt.finder.utils.SWTBotPreferences;
		import org.eclipse.swtbot.swt.finder.widgets.SWTBotButton;
		import org.eclipse.swtbot.swt.finder.widgets.SWTBotCheckBox;
		import org.eclipse.swtbot.swt.finder.widgets.SWTBotCombo;
		import org.eclipse.swtbot.swt.finder.widgets.SWTBotLabel;
		import org.eclipse.swtbot.swt.finder.widgets.SWTBotRadio;
		import org.eclipse.swtbot.swt.finder.widgets.SWTBotText;
		import org.junit.Before;
		import org.junit.Test;
		import org.junit.runner.RunWith;
		
		@RunWith(SWTBotJunit4ClassRunner.class)
		public class FormularioTest {
		
		    private Display display;
		    private Shell shell;
		    private SWTBot bot;
		    
			@Before
		    public void setup() {
		      display = new Display();
		      shell   = new Formulario().showForm(display);
		      bot     = new SWTBot(shell);
			}
		
			@Test
			public void test1() {
				// slow down execution
				SWTBotPreferences.PLAYBACK_DELAY = 100;
				
				// Añadimos las referencias a los elementos del formulario
				«FOR input : form.layout.entradas»
				
				« IF input instanceof InputBoton »// CASO BOTON
				SWTBotButton boton«input.name» = bot.button("«input.name»");
				« ELSEIF input instanceof InputTexto »// CASO TEXTO
				SWTBotText texto«input.name» = bot.textWithLabel("«input.name»");
				« ELSEIF input instanceof InputCheck »// CASO CHECKBOX
				SWTBotCheckBox check«input.name»[] = new SWTBotCheckBox[«(input as InputCheck).valores.size»];
				«FOR valor : (input as InputCheck).valores»
				check«input.name»[«(input as InputCheck).valores.indexOf(valor)»] = bot.checkBox("«valor»");
				«ENDFOR»
				« ELSEIF input instanceof InputRadio »// CASO RADIO
				SWTBotRadio radio«input.name»[] = new SWTBotRadio[«(input as InputRadio).valores.size»];
				«FOR valor : (input as InputRadio).valores»
				radio«input.name»[«(input as InputRadio).valores.indexOf(valor)»] = bot.radio("«valor»");
				«ENDFOR»
				« ELSEIF input instanceof InputCombo » // CASO COMBO
				SWTBotCombo combo«input.name» = bot.comboBox("«input.name»");
				« ENDIF »
				«ENDFOR»
				
				// Ahora codificamos los ASSERTS
				
				« FOR accion : form.pruebas.acciones »
				« IF accion.elemento instanceof InputBoton »
				boton«accion.elemento.name».setFocus();
				boton«accion.elemento.name».select();
				display.update();
				« ELSEIF accion.elemento instanceof InputTexto»
				texto«accion.elemento.name».setFocus();
				texto«accion.elemento.name».select();
				texto«accion.elemento.name».setText("«(accion as AccionValor).valor»");
				display.update();
				« ELSEIF accion.elemento instanceof InputCheck»// ****************AUN QUEDA******************
				check«accion.elemento.name»[«(accion as AccionSeleccion).valor-1»].setFocus();
				check«accion.elemento.name»[«(accion as AccionSeleccion).valor-1»].select();
				display.update();
				« ELSEIF accion.elemento instanceof InputCombo »// ****************AUN QUEDA******************
				combo«accion.elemento.name».setFocus();
				combo«accion.elemento.name».select();
				display.update();
				« ELSEIF accion.elemento instanceof InputRadio »// ****************AUN QUEDA******************
				radio«accion.elemento.name»[«(accion as AccionSeleccion).valor-1»].setFocus();
				radio«accion.elemento.name»[«(accion as AccionSeleccion).valor-1»].click();
				display.update();
				« ENDIF »
				« IF accion.asercion instanceof AsercionHabilitado »
				« IF accion.asercion.elemento instanceof InputBoton »
				assertTrue(boton«accion.asercion.elemento.name».isEnabled());
				« ELSEIF accion.asercion.elemento instanceof InputTexto »
				assertTrue(texto«accion.asercion.elemento.name».isEnabled());
				« ELSEIF accion.asercion.elemento instanceof InputCombo »
				assertTrue(combo«accion.asercion.elemento.name».isEnabled());
				« ELSEIF accion.asercion.elemento instanceof InputRadio »
				assertTrue(radio«accion.asercion.elemento.name».isEnabled()); /// ESTAAAAAA MAAAAAAAAAAAAAAL
				« ELSEIF accion.asercion.elemento instanceof InputCheck »
				assertTrue(check«accion.asercion.elemento.name».isEnabled());
				« ENDIF»
				« ELSEIF accion.asercion instanceof AsercionInvisible »
				« IF accion.asercion.elemento instanceof InputBoton »
				assertTrue(boton«accion.asercion.elemento.name».isVisible());
				« ELSEIF accion.asercion.elemento instanceof InputTexto »
				assertTrue(texto«accion.asercion.elemento.name».isVisible());
				« ELSEIF accion.asercion.elemento instanceof InputCombo »
				assertTrue(combo«accion.asercion.elemento.name».isVisible());
				« ELSEIF accion.asercion.elemento instanceof InputRadio »
				assertTrue(radio«accion.asercion.elemento.name».isVisible()); /// ESTAAAAAA MAAAAAAAAAAAAAAL
				« ELSEIF accion.asercion.elemento instanceof InputCheck »
				assertTrue(check«accion.asercion.elemento.name».isVisible());
				« ELSEIF accion.asercion instanceof AsercionValor »
				« ELSEIF accion.asercion instanceof AsercionSeleccion »
				« IF accion.asercion.elemento instanceof InputCheck »
				assertTrue(check«accion.asercion.elemento.name».isSelected());
				« ELSEIF accion.asercion.elemento instanceof InputCombo »
				assertTrue(combo«accion.asercion.elemento.name».isSelected());
				« ELSEIF accion.asercion.elemento instanceof InputRadio »
				assertTrue(radio«accion.asercion.elemento.name».isSelected());
				« ENDIF »
				« ENDIF »
				« ENDIF »
				« ENDFOR »
		
				display.dispose();
				shell.dispose();		 
			}
		}
	'''
	
}
