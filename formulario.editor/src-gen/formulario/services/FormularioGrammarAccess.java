/*
 * generated by Xtext
 */
package formulario.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FormularioGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class FormularioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Formulario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFormularioAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFormularioKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEntradasKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEntradasAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cEntradasInputCrossReference_4_1_0 = (CrossReference)cEntradasAssignment_4_1.eContents().get(0);
		private final RuleCall cEntradasInputEStringParserRuleCall_4_1_0_1 = (RuleCall)cEntradasInputCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Formulario:
		//	{Formulario} "Formulario" name=EString "{" ("entradas" entradas=[Input|EString])? "}";
		@Override public ParserRule getRule() { return rule; }

		//{Formulario} "Formulario" name=EString "{" ("entradas" entradas=[Input|EString])? "}"
		public Group getGroup() { return cGroup; }

		//{Formulario}
		public Action getFormularioAction_0() { return cFormularioAction_0; }

		//"Formulario"
		public Keyword getFormularioKeyword_1() { return cFormularioKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("entradas" entradas=[Input|EString])?
		public Group getGroup_4() { return cGroup_4; }

		//"entradas"
		public Keyword getEntradasKeyword_4_0() { return cEntradasKeyword_4_0; }

		//entradas=[Input|EString]
		public Assignment getEntradasAssignment_4_1() { return cEntradasAssignment_4_1; }

		//[Input|EString]
		public CrossReference getEntradasInputCrossReference_4_1_0() { return cEntradasInputCrossReference_4_1_0; }

		//EString
		public RuleCall getEntradasInputEStringParserRuleCall_4_1_0_1() { return cEntradasInputEStringParserRuleCall_4_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Input");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInput_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInputTextoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInputRadioParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInputComboParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInputCheckParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cInputBotonParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Input:
		//	Input_Impl | InputTexto | InputRadio | InputCombo | InputCheck | InputBoton;
		@Override public ParserRule getRule() { return rule; }

		//Input_Impl | InputTexto | InputRadio | InputCombo | InputCheck | InputBoton
		public Alternatives getAlternatives() { return cAlternatives; }

		//Input_Impl
		public RuleCall getInput_ImplParserRuleCall_0() { return cInput_ImplParserRuleCall_0; }

		//InputTexto
		public RuleCall getInputTextoParserRuleCall_1() { return cInputTextoParserRuleCall_1; }

		//InputRadio
		public RuleCall getInputRadioParserRuleCall_2() { return cInputRadioParserRuleCall_2; }

		//InputCombo
		public RuleCall getInputComboParserRuleCall_3() { return cInputComboParserRuleCall_3; }

		//InputCheck
		public RuleCall getInputCheckParserRuleCall_4() { return cInputCheckParserRuleCall_4; }

		//InputBoton
		public RuleCall getInputBotonParserRuleCall_5() { return cInputBotonParserRuleCall_5; }
	}

	public class Input_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Input_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInputKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Input_Impl returns Input:
		//	{Input} "Input" name=EString;
		@Override public ParserRule getRule() { return rule; }

		//{Input} "Input" name=EString
		public Group getGroup() { return cGroup; }

		//{Input}
		public Action getInputAction_0() { return cInputAction_0; }

		//"Input"
		public Keyword getInputKeyword_1() { return cInputKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class InputTextoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputTexto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputTextoAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInputTextoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//InputTexto:
		//	{InputTexto} "InputTexto" name=EString;
		@Override public ParserRule getRule() { return rule; }

		//{InputTexto} "InputTexto" name=EString
		public Group getGroup() { return cGroup; }

		//{InputTexto}
		public Action getInputTextoAction_0() { return cInputTextoAction_0; }

		//"InputTexto"
		public Keyword getInputTextoKeyword_1() { return cInputTextoKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}

	public class InputRadioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputRadio");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputRadioAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInputRadioKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//InputRadio:
		//	{InputRadio} "InputRadio" name=EString;
		@Override public ParserRule getRule() { return rule; }

		//{InputRadio} "InputRadio" name=EString
		public Group getGroup() { return cGroup; }

		//{InputRadio}
		public Action getInputRadioAction_0() { return cInputRadioAction_0; }

		//"InputRadio"
		public Keyword getInputRadioKeyword_1() { return cInputRadioKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}

	public class InputComboElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputCombo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputComboAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInputComboKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//InputCombo:
		//	{InputCombo} "InputCombo" name=EString;
		@Override public ParserRule getRule() { return rule; }

		//{InputCombo} "InputCombo" name=EString
		public Group getGroup() { return cGroup; }

		//{InputCombo}
		public Action getInputComboAction_0() { return cInputComboAction_0; }

		//"InputCombo"
		public Keyword getInputComboKeyword_1() { return cInputComboKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}

	public class InputCheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputCheck");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputCheckAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInputCheckKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//InputCheck:
		//	{InputCheck} "InputCheck" name=EString;
		@Override public ParserRule getRule() { return rule; }

		//{InputCheck} "InputCheck" name=EString
		public Group getGroup() { return cGroup; }

		//{InputCheck}
		public Action getInputCheckAction_0() { return cInputCheckAction_0; }

		//"InputCheck"
		public Keyword getInputCheckKeyword_1() { return cInputCheckKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}

	public class InputBotonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputBoton");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputBotonAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInputBotonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//InputBoton:
		//	{InputBoton} "InputBoton" name=EString;
		@Override public ParserRule getRule() { return rule; }

		//{InputBoton} "InputBoton" name=EString
		public Group getGroup() { return cGroup; }

		//{InputBoton}
		public Action getInputBotonAction_0() { return cInputBotonAction_0; }

		//"InputBoton"
		public Keyword getInputBotonKeyword_1() { return cInputBotonKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	
	
	private final FormularioElements pFormulario;
	private final InputElements pInput;
	private final Input_ImplElements pInput_Impl;
	private final EStringElements pEString;
	private final InputTextoElements pInputTexto;
	private final InputRadioElements pInputRadio;
	private final InputComboElements pInputCombo;
	private final InputCheckElements pInputCheck;
	private final InputBotonElements pInputBoton;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FormularioGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFormulario = new FormularioElements();
		this.pInput = new InputElements();
		this.pInput_Impl = new Input_ImplElements();
		this.pEString = new EStringElements();
		this.pInputTexto = new InputTextoElements();
		this.pInputRadio = new InputRadioElements();
		this.pInputCombo = new InputComboElements();
		this.pInputCheck = new InputCheckElements();
		this.pInputBoton = new InputBotonElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("formulario.Formulario".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Formulario:
	//	{Formulario} "Formulario" name=EString "{" ("entradas" entradas=[Input|EString])? "}";
	public FormularioElements getFormularioAccess() {
		return pFormulario;
	}
	
	public ParserRule getFormularioRule() {
		return getFormularioAccess().getRule();
	}

	//Input:
	//	Input_Impl | InputTexto | InputRadio | InputCombo | InputCheck | InputBoton;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}

	//Input_Impl returns Input:
	//	{Input} "Input" name=EString;
	public Input_ImplElements getInput_ImplAccess() {
		return pInput_Impl;
	}
	
	public ParserRule getInput_ImplRule() {
		return getInput_ImplAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//InputTexto:
	//	{InputTexto} "InputTexto" name=EString;
	public InputTextoElements getInputTextoAccess() {
		return pInputTexto;
	}
	
	public ParserRule getInputTextoRule() {
		return getInputTextoAccess().getRule();
	}

	//InputRadio:
	//	{InputRadio} "InputRadio" name=EString;
	public InputRadioElements getInputRadioAccess() {
		return pInputRadio;
	}
	
	public ParserRule getInputRadioRule() {
		return getInputRadioAccess().getRule();
	}

	//InputCombo:
	//	{InputCombo} "InputCombo" name=EString;
	public InputComboElements getInputComboAccess() {
		return pInputCombo;
	}
	
	public ParserRule getInputComboRule() {
		return getInputComboAccess().getRule();
	}

	//InputCheck:
	//	{InputCheck} "InputCheck" name=EString;
	public InputCheckElements getInputCheckAccess() {
		return pInputCheck;
	}
	
	public ParserRule getInputCheckRule() {
		return getInputCheckAccess().getRule();
	}

	//InputBoton:
	//	{InputBoton} "InputBoton" name=EString;
	public InputBotonElements getInputBotonAccess() {
		return pInputBoton;
	}
	
	public ParserRule getInputBotonRule() {
		return getInputBotonAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
