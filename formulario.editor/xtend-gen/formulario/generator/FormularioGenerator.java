/**
 * generated by Xtext
 */
package formulario.generator;

import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class FormularioGenerator implements IGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    throw new Error("Unresolved compilation problems:"
      + "\nFormulario cannot be resolved to a type."
      + "\nThe method or field Formulario is undefined for the type FormularioGenerator"
      + "\npruebas cannot be resolved");
  }
  
  public CharSequence generarFormulario(final /* Formulario */Object form) {
    throw new Error("Unresolved compilation problems:"
      + "\nInputBoton cannot be resolved to a type."
      + "\nInputTexto cannot be resolved to a type."
      + "\nInputCheck cannot be resolved to a type."
      + "\nInputRadio cannot be resolved to a type."
      + "\nInputCombo cannot be resolved to a type."
      + "\nname cannot be resolved"
      + "\nlayout cannot be resolved"
      + "\nentradas cannot be resolved"
      + "\nclass cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nlayout cannot be resolved"
      + "\naltura cannot be resolved"
      + "\nlayout cannot be resolved"
      + "\nanchura cannot be resolved");
  }
  
  public CharSequence compile(final /* Formulario */Object f) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* Ventana principal.");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("package gui;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.swing.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class BaseDatos extends JFrame {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final /* Input */Object inp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* Ventana principal.");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("package gui;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.swing.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class BaseDatos extends JFrame {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generarTest(final /* PruebaInterfaz */Object pruebas) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package forms;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import static org.junit.Assert.assertFalse;");
    _builder.newLine();
    _builder.append("import static org.junit.Assert.assertTrue;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.swt.widgets.Display;");
    _builder.newLine();
    _builder.append("import org.eclipse.swt.widgets.Shell;");
    _builder.newLine();
    _builder.append("import org.eclipse.swtbot.swt.finder.SWTBot;");
    _builder.newLine();
    _builder.append("import org.eclipse.swtbot.swt.finder.junit.SWTBotJunit4ClassRunner;");
    _builder.newLine();
    _builder.append("import org.eclipse.swtbot.swt.finder.utils.SWTBotPreferences;");
    _builder.newLine();
    _builder.append("import org.eclipse.swtbot.swt.finder.widgets.SWTBotCheckBox;");
    _builder.newLine();
    _builder.append("import org.eclipse.swtbot.swt.finder.widgets.SWTBotLabel;");
    _builder.newLine();
    _builder.append("import org.eclipse.swtbot.swt.finder.widgets.SWTBotText;");
    _builder.newLine();
    _builder.append("import org.junit.Before;");
    _builder.newLine();
    _builder.append("import org.junit.Test;");
    _builder.newLine();
    _builder.append("import org.junit.runner.RunWith;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@RunWith(SWTBotJunit4ClassRunner.class)");
    _builder.newLine();
    _builder.append("public class SampleFormTest {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Display display;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Shell shell;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private SWTBot bot;");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Before");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setup() {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("display = new Display();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("shell   = new SampleForm().showForm(display);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("bot     = new SWTBot(shell);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Test");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void test1() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// slow down execution");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SWTBotPreferences.PLAYBACK_DELAY = 100;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SWTBotCheckBox checkCash  = bot.checkBox(\"Pay with cash?\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SWTBotText  textCCNumber  = bot.textWithLabel(\"Credit card number\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SWTBotLabel labelCCNumber = bot.label(\"Credit card number\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// checkbutton should be unchecked, text field should be visible");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertFalse(checkCash.isChecked());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertTrue(textCCNumber.isVisible());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertTrue(labelCCNumber.isVisible());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// select check");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("checkCash.setFocus();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("checkCash.select();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("display.update();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// checkbutton should be checked, text field should be hidden");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertTrue(checkCash.isChecked());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertFalse(textCCNumber.isVisible());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertFalse(labelCCNumber.isVisible());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// deselect check");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("checkCash.setFocus();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("checkCash.deselect();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("display.update();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// checkbutton should be unchecked, text field should be visible");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertFalse(checkCash.isChecked());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertTrue(textCCNumber.isVisible());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertTrue(labelCCNumber.isVisible());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("display.dispose();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("shell.dispose();\t\t ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
