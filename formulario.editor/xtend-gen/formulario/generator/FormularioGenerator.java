/**
 * generated by Xtext
 */
package formulario.generator;

import Formularios_DASOFT.Formulario;
import Formularios_DASOFT.Input;
import Formularios_DASOFT.InputBoton;
import Formularios_DASOFT.InputCheck;
import Formularios_DASOFT.InputCombo;
import Formularios_DASOFT.InputRadio;
import Formularios_DASOFT.InputTexto;
import Formularios_DASOFT.Layout;
import Formularios_DASOFT.PruebaInterfaz;
import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class FormularioGenerator implements IGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Formulario> _filter = Iterables.<Formulario>filter(_iterable, Formulario.class);
    for (final Formulario form : _filter) {
      {
        CharSequence _generarFormulario = this.generarFormulario(form);
        fsa.generateFile("forms/Formulario.java", _generarFormulario);
        PruebaInterfaz _pruebas = form.getPruebas();
        CharSequence _generarTest = this.generarTest(_pruebas);
        fsa.generateFile("../tests/forms/Formulario.java", _generarTest);
      }
    }
  }
  
  public CharSequence generarFormulario(final Formulario form) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package forms;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.swt.SWT;");
    _builder.newLine();
    _builder.append("import org.eclipse.swt.events.SelectionEvent;");
    _builder.newLine();
    _builder.append("import org.eclipse.swt.events.SelectionListener;");
    _builder.newLine();
    _builder.append("import org.eclipse.swt.layout.GridData;");
    _builder.newLine();
    _builder.append("import org.eclipse.swt.layout.GridLayout;");
    _builder.newLine();
    _builder.append("import org.eclipse.swt.widgets.Button;");
    _builder.newLine();
    _builder.append("import org.eclipse.swt.widgets.Display;");
    _builder.newLine();
    _builder.append("import org.eclipse.swt.widgets.Label;");
    _builder.newLine();
    _builder.append("import org.eclipse.swt.widgets.Shell;");
    _builder.newLine();
    _builder.append("import org.eclipse.swt.widgets.Text;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Formulario {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Display display = new Display();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Shell   shell   = new SampleForm().showForm(display);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while (!shell.isDisposed()) ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (!display.readAndDispatch())");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("display.sleep();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("display.dispose();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public Shell showForm(Display display) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Shell shell = new Shell(display);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("shell.setText  (\"");
    String _name = form.getName();
    _builder.append(_name, "\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    {
      Layout _layout = form.getLayout();
      EList<Input> _entradas = _layout.getEntradas();
      for(final Input input : _entradas) {
        _builder.append("\t");
        _builder.append("// ");
        Class<? extends Input> _class = input.getClass();
        _builder.append(_class, "\t");
        _builder.newLineIfNotEmpty();
        {
          if ((input instanceof InputBoton)) {
            _builder.append("\t");
            _builder.append("Button boton");
            String _name_1 = ((InputBoton)input).getName();
            _builder.append(_name_1, "\t");
            _builder.append(" = new Button(shell, SWT.CHECK);");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("boton");
            String _name_2 = ((InputBoton)input).getName();
            _builder.append(_name_2, "\t");
            _builder.append(".setText(\"");
            String _name_3 = ((InputBoton)input).getName();
            _builder.append(_name_3, "\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
          } else {
            if ((input instanceof InputTexto)) {
              _builder.append("\t");
              _builder.append("Label label");
              String _name_4 = input.getName();
              _builder.append(_name_4, "\t");
              _builder.append(" = new Label(shell, SWT.NONE);");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("Text  text");
              String _name_5 = input.getName();
              _builder.append(_name_5, "\t");
              _builder.append("  = new Text(shell, SWT.BORDER);");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("label");
              String _name_6 = input.getName();
              _builder.append(_name_6, "\t");
              _builder.append(".setText(\"");
              String _name_7 = input.getName();
              _builder.append(_name_7, "\t");
              _builder.append("\");");
              _builder.newLineIfNotEmpty();
            } else {
              if ((input instanceof InputCheck)) {
                _builder.append("\t");
                _builder.append("Button boton");
                String _name_8 = input.getName();
                _builder.append(_name_8, "\t");
                _builder.append(" = new Button(shell, SWT.CHECK);");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("boton");
                String _name_9 = input.getName();
                _builder.append(_name_9, "\t");
                _builder.append(".setText(\"");
                String _name_10 = input.getName();
                _builder.append(_name_10, "\t");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
              } else {
                if ((input instanceof InputRadio)) {
                  _builder.append("\t");
                  _builder.newLine();
                } else {
                  if ((input instanceof InputCombo)) {
                    _builder.append("\t");
                    _builder.newLine();
                  }
                }
              }
            }
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// layout");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("GridData data = new GridData(SWT.FILL, SWT.FILL, true, false);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("shell.setLayout(new GridLayout(");
    Layout _layout_1 = form.getLayout();
    int _altura = _layout_1.getAltura();
    _builder.append(_altura, "\t");
    _builder.append(", true));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("data.horizontalSpan = ");
    Layout _layout_2 = form.getLayout();
    int _anchura = _layout_2.getAnchura();
    _builder.append(_anchura, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("//checkCash.setLayoutData(data);\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// checkbutton");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Button checkCash = new Button(shell, SWT.CHECK);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("checkCash.setText(\"Pay with cash?\");\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// text field");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Label labelCCNumber = new Label(shell, SWT.NONE);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Text  textCCNumber  = new Text(shell, SWT.BORDER);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("labelCCNumber.setText(\"Credit card number\");*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// layout");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("GridData data = new GridData(SWT.FILL, SWT.FILL, true, false);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("shell.setLayout(new GridLayout(2, true));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("data.horizontalSpan = 2;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("checkCash.setLayoutData(data);\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("**/");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// show or hide text field depending on checkbutton selection");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("checkCash.addSelectionListener(new SelectionListener() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public void widgetSelected(SelectionEvent arg0) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("labelCCNumber.setVisible( !checkCash.getSelection() );");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("textCCNumber.setVisible ( !checkCash.getSelection() );");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public void widgetDefaultSelected(SelectionEvent arg0) {}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("**/");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// show form");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("shell.pack();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("shell.open();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return shell;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Formulario f) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* Ventana principal.");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("package gui;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.swing.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class BaseDatos extends JFrame {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Input inp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* Ventana principal.");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("package gui;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.swing.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class BaseDatos extends JFrame {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generarTest(final PruebaInterfaz pruebas) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package forms;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import static org.junit.Assert.assertFalse;");
    _builder.newLine();
    _builder.append("import static org.junit.Assert.assertTrue;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.swt.widgets.Display;");
    _builder.newLine();
    _builder.append("import org.eclipse.swt.widgets.Shell;");
    _builder.newLine();
    _builder.append("import org.eclipse.swtbot.swt.finder.SWTBot;");
    _builder.newLine();
    _builder.append("import org.eclipse.swtbot.swt.finder.junit.SWTBotJunit4ClassRunner;");
    _builder.newLine();
    _builder.append("import org.eclipse.swtbot.swt.finder.utils.SWTBotPreferences;");
    _builder.newLine();
    _builder.append("import org.eclipse.swtbot.swt.finder.widgets.SWTBotCheckBox;");
    _builder.newLine();
    _builder.append("import org.eclipse.swtbot.swt.finder.widgets.SWTBotLabel;");
    _builder.newLine();
    _builder.append("import org.eclipse.swtbot.swt.finder.widgets.SWTBotText;");
    _builder.newLine();
    _builder.append("import org.junit.Before;");
    _builder.newLine();
    _builder.append("import org.junit.Test;");
    _builder.newLine();
    _builder.append("import org.junit.runner.RunWith;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@RunWith(SWTBotJunit4ClassRunner.class)");
    _builder.newLine();
    _builder.append("public class SampleFormTest {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Display display;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Shell shell;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private SWTBot bot;");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Before");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setup() {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("display = new Display();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("shell   = new SampleForm().showForm(display);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("bot     = new SWTBot(shell);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Test");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void test1() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// slow down execution");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SWTBotPreferences.PLAYBACK_DELAY = 100;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SWTBotCheckBox checkCash  = bot.checkBox(\"Pay with cash?\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SWTBotText  textCCNumber  = bot.textWithLabel(\"Credit card number\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SWTBotLabel labelCCNumber = bot.label(\"Credit card number\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// checkbutton should be unchecked, text field should be visible");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertFalse(checkCash.isChecked());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertTrue(textCCNumber.isVisible());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertTrue(labelCCNumber.isVisible());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// select check");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("checkCash.setFocus();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("checkCash.select();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("display.update();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// checkbutton should be checked, text field should be hidden");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertTrue(checkCash.isChecked());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertFalse(textCCNumber.isVisible());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertFalse(labelCCNumber.isVisible());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// deselect check");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("checkCash.setFocus();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("checkCash.deselect();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("display.update();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// checkbutton should be unchecked, text field should be visible");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertFalse(checkCash.isChecked());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertTrue(textCCNumber.isVisible());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertTrue(labelCCNumber.isVisible());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("display.dispose();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("shell.dispose();\t\t ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
